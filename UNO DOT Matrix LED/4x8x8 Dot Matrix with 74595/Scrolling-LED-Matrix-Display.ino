#define dataPin 8 //  Data pin of shift register
#define clockPin 9 //  Clock pin of shift register
#define latchPin 10 //  Latch pin of shift register

//  Create pixels for all alphanumeric characters and symbols
const char pixels[96][6] = {
  //sp                               //!                             //"                               //#
  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, {0x00, 0x00, 0x00, 0x2f, 0x00, 0x00}, {0x00, 0x00, 0x07, 0x00, 0x07, 0x00}, {0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14},
  //$                               //%                              //&                               //'
  {0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12}, {0x00, 0x23, 0x13, 0x08, 0x64, 0x62}, {0x00, 0x36, 0x49, 0x55, 0x22, 0x50}, {0x00, 0x00, 0x05, 0x03, 0x00, 0x00},
  //(                                //)                             //*                               //+
  {0x00, 0x00, 0x1c, 0x22, 0x41, 0x00}, {0x00, 0x00, 0x41, 0x22, 0x1c, 0x00}, {0x00, 0x14, 0x08, 0x3e, 0x08, 0x14}, {0x00, 0x08, 0x08, 0x3e, 0x08, 0x08},
  //,                               //-                             //.                               ///
  {0x00, 0x00, 0x00, 0x50, 0x30, 0x00}, {0x00, 0x10, 0x10, 0x10, 0x10, 0x10}, {0x00, 0x00, 0x60, 0x60, 0x00, 0x00}, {0x00, 0x20, 0x10, 0x08, 0x04, 0x02},
  //0                               //1                             //2                               //3
  {0x00, 0x3e, 0x51, 0x49, 0x45, 0x3e}, {0x00, 0x00, 0x42, 0x7f, 0x40, 0x00}, {0x00, 0x42, 0x61, 0x51, 0x49, 0x46}, {0x00, 0x21, 0x41, 0x45, 0x4b, 0x31},
  //4                              //5                             //6                               //7
  {0x00, 0x18, 0x14, 0x12, 0x7f, 0x10}, {0x00, 0x27, 0x45, 0x45, 0x45, 0x39}, {0x00, 0x3c, 0x4a, 0x49, 0x49, 0x30}, {0x00, 0x01, 0x71, 0x09, 0x05, 0x03},
  //8                              //9                             //:                               //;
  {0x00, 0x36, 0x49, 0x49, 0x49, 0x36}, {0x00, 0x06, 0x49, 0x49, 0x29, 0x1e}, {0x00, 0x00, 0x36, 0x36, 0x00, 0x00}, {0x00, 0x00, 0x56, 0x36, 0x00, 0x00},
  //<                             //=                              //>                               //?
  {0x00, 0x08, 0x14, 0x22, 0x41, 0x00}, {0x00, 0x14, 0x14, 0x14, 0x14, 0x14}, {0x00, 0x00, 0x41, 0x22, 0x14, 0x08}, {0x00, 0x02, 0x01, 0x51, 0x09, 0x06},
  //@                              //A 33                            //B                               //C
  {0x00, 0x32, 0x49, 0x59, 0x51, 0x3e}, {0x00, 0x7e, 0x11, 0x11, 0x11, 0x7e}, {0x00, 0x7f, 0x49, 0x49, 0x49, 0x36}, {0x00, 0x3e, 0x41, 0x41, 0x41, 0x22},
  //D                              //E                             //F                               //G
  {0x00, 0x7f, 0x41, 0x41, 0x22, 0x1c}, {0x00, 0x7f, 0x49, 0x49, 0x49, 0x41}, {0x00, 0x7f, 0x09, 0x09, 0x09, 0x01}, {0x00, 0x3e, 0x41, 0x49, 0x49, 0x7a},
  //H                              //I                             //J                               //K
  {0x00, 0x7f, 0x08, 0x08, 0x08, 0x7f}, {0x00, 0x00, 0x41, 0x7f, 0x41, 0x00}, {0x00, 0x20, 0x40, 0x41, 0x3f, 0x01}, {0x00, 0x7f, 0x08, 0x14, 0x22, 0x41},
  //L                              //M                             //N                               //O
  {0x00, 0x7f, 0x40, 0x40, 0x40, 0x40}, {0x00, 0x7f, 0x02, 0x0c, 0x02, 0x7f}, {0x00, 0x7f, 0x04, 0x08, 0x10, 0x7f}, {0x00, 0x3e, 0x41, 0x41, 0x41, 0x3e},
  //P                              //Q                             //R                               //S
  {0x00, 0x7f, 0x09, 0x09, 0x09, 0x06}, {0x00, 0x3e, 0x41, 0x51, 0x21, 0x5e}, {0x00, 0x7f, 0x09, 0x19, 0x29, 0x46}, {0x00, 0x46, 0x49, 0x49, 0x49, 0x31},
  //T                              //U                             //V                               //W
  {0x00, 0x01, 0x01, 0x7f, 0x01, 0x01}, {0x00, 0x3f, 0x40, 0x40, 0x40, 0x3f}, {0x00, 0x1f, 0x20, 0x40, 0x20, 0x1f}, {0x00, 0x3f, 0x40, 0x38, 0x40, 0x3f},
  //X                              //Y                             //Z                               //[
  {0x00, 0x63, 0x14, 0x08, 0x14, 0x63}, {0x00, 0x07, 0x08, 0x70, 0x08, 0x07}, {0x00, 0x61, 0x51, 0x49, 0x45, 0x43}, {0x00, 0x00, 0x7f, 0x41, 0x41, 0x00},
  //backslash                      //]                             //^                               //_
  {0x00, 0x02, 0x04, 0x08, 0x10, 0x20}, {0x00, 0x00, 0x41, 0x41, 0x7F, 0x00}, {0x00, 0x04, 0x02, 0x01, 0x02, 0x04}, {0x00, 0x40, 0x40, 0x40, 0x40, 0x40},
  //`                              //a                             //b                               //c
  {0x00, 0x00, 0x01, 0x02, 0x04, 0x00}, {0x00, 0x20, 0x54, 0x54, 0x54, 0x78}, {0x00, 0x7F, 0x48, 0x44, 0x44, 0x38}, {0x00, 0x38, 0x44, 0x44, 0x44, 0x20},
  //d                              //e                             //f                               //g
  {0x00, 0x38, 0x44, 0x44, 0x48, 0x7F}, {0x00, 0x38, 0x54, 0x54, 0x54, 0x18}, {0x00, 0x08, 0x7E, 0x09, 0x01, 0x02}, {0x00, 0x0C, 0x52, 0x52, 0x52, 0x3e},
  //h                              //i                             //j                               //k
  {0x00, 0x7f, 0x08, 0x04, 0x04, 0x78}, {0x00, 0x00, 0x44, 0x7d, 0x40, 0x00}, {0x00, 0x20, 0x40, 0x44, 0x3d, 0x00}, {0x00, 0x7f, 0x10, 0x28, 0x44, 0x00},
  //l                              //m                             //n                               //o
  {0x00, 0x00, 0x41, 0x7f, 0x40, 0x00}, {0x00, 0x7c, 0x04, 0x18, 0x04, 0x78}, {0x00, 0x7c, 0x08, 0x04, 0x04, 0x78}, {0x00, 0x38, 0x44, 0x44, 0x44, 0x38},
  //p                              //q                             //r                               //s
  {0x00, 0x7c, 0x14, 0x14, 0x14, 0x08}, {0x00, 0x08, 0x14, 0x14, 0x18, 0x7c}, {0x00, 0x7c, 0x08, 0x04, 0x04, 0x08}, {0x00, 0x48, 0x54, 0x54, 0x54, 0x20},
  //t                              //u                             //v                               //w
  {0x00, 0x04, 0x3f, 0x44, 0x40, 0x20}, {0x00, 0x3c, 0x40, 0x40, 0x20, 0x7c}, {0x00, 0x1c, 0x20, 0x40, 0x20, 0x1c}, {0x00, 0x3c, 0x40, 0x30, 0x40, 0x3c},
  //x                              //y                             //z                               //{
  {0x00, 0x44, 0x28, 0x10, 0x28, 0x44}, {0x00, 0x0c, 0x50, 0x50, 0x50, 0x3c}, {0x00, 0x44, 0x64, 0x54, 0x4c, 0x44}, {0x00, 0x00, 0x08, 0x36, 0x41, 0x00},
  //|                              //}                             //~                               //del
  {0x00, 0x00, 0x00, 0x7f, 0x00, 0x00}, {0x00, 0x00, 0x41, 0x36, 0x08, 0x00}, {0x00, 0x04, 0x02, 0x04, 0x08, 0x04}, {0x00, 0x00, 0x00, 0x36, 0x00, 0x00}
};

const byte shift_reg = 4;  //  Number of shift registers used
const byte columns = shift_reg * 8;
const char msg2[] = "Designed by ..................";
byte mdata[columns];
byte character;

void setup() {
  for (byte y = 8; y <= 10; y++)  pinMode(y, OUTPUT);
}

void loop() {
  scroll_right_to_left(msg2, 4);  //  Scrolls text from right to left
//  shift_to_left(msg2, 4); //  Scrolls text from left to right
}

void shift_to_left(byte val, byte sped) {
  for (byte h = 0; h < columns; h++)  mdata[h] = mdata[h + 1]; //shift to left
  mdata[columns - 1] = val;  displayPixels(sped);
}

void scroll_right_to_left(byte data[], byte sped) {
  for (byte i = 0; i < strlen(data); i++) {
    character = data[i] - ' ';  //D 36  SPACE=32
    for (byte j = 0; j < 6; j++) {
      if (character == 0 && j > 2)  break; //if character = space
      else if (character > 0 && pixels[character][j] == 0)  continue;
      shift_to_left(pixels[character][j], sped);
    }
    if (character > 0)  shift_to_left(0, sped);
  }
  createSpace();
}

void createSpace() {
  for (byte j = 0; j < columns; j++) {
    for (byte h = 0; h < columns; h++)  mdata[h] = mdata[h + 1]; //shift to left
    mdata[columns - 1] = 0;
    displayPixels(5);
  }
}

void displayPixels(byte Speed) {
  for (byte i = 0; i < Speed; i++) {
    byte k = 0;
    for (byte x = 1; x <= shift_reg; x++) {
      for (byte y = 0; y < 8; y++) {
        byte dat = mdata[k];
        for (byte z = 1; z <= shift_reg; z++) {
          if (z == x)  shiftOut(dataPin, clockPin, MSBFIRST, 255 - (1 << y));
          else  shiftOut(dataPin, clockPin, MSBFIRST, 255);
        }
        shiftOut(dataPin, clockPin, MSBFIRST, dat);  
        k++;
        digitalWrite(latchPin, 1);
        digitalWrite(latchPin, 0);
        delayMicroseconds(100);
      }
    }
  }
}
